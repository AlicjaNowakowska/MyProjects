# This code aims to find the best regression model for the infection potential of the indvidual
# on the basis of the variables such as the centrality measures and number of contacts of the node.
# The multicollinearity problem for the model variables is identified and eliminated according
# to the schema presented in the Thesis. The step function, data transformations and the 
# model validation is used and done.



setwd("C:/Users/wojci/Documents/Studia/praca/ZDEJCIA/rozdzial2/wykresy regresja")

dane=read.table('C:/Users/wojci/Documents/Studia/praca/DANE/nodes_char_all_1000.csv',
	 header=TRUE,sep=",")
same_k=read.table('C:/Users/wojci/Documents/Studia/praca/DANE/nodes_contacts.csv',
	 header=TRUE,sep=",")
data=total <- merge(dane,same_k,by="id")

data <- subset(data, select = -c(k5, k8,k3.x,k_end.x))

data['k_end.y']=data['k_end.y']-data['k3.y']-data['k6']-data['k9']
names(data)[names(data) == "k_end.y"] <- "k_end"
names(data)[names(data) == "k3.y"] <- "k3"

data['k_end']=data['k_end']-data['k3']-data['k6']-data['k9']

############# Model wszystkie zmienne -> problem korelacji

model=lm(chance~between+cluster+d_centrality+close+eigen+walk+inf+harmonic+k3+k6+k9+k_end,data=data)
step(model)
m_opt=lm(formula = chance ~ between + cluster + d_centrality + close + 
    eigen + harmonic + k6 + k_end, data = data) #AIC-507.01
summary(m_opt)



zmienne=c('between','cluster','d_centrality',
                    'close','eigen','walk','inf','harmonic','k3','k6','k9','k_end')

titles=c('betweeness centrality','clustering coefficient','degree centrality','closeness centrality','eigen vector centrality',
       'random walk centrality','information centrality','harmonic centrality')

i=0
Y=sapply(data['chance'],as.numeric)

r_2=c()

for (zmienna in zmienne){
	X=sapply(data[zmienna],as.numeric)
	model=lm(Y~X)
	print(zmienna)
	print(summary(model))
	r_2[i]=sapply(summary(model)$r.squared,as.numeric)
	i=i+1
}

res <- cor(data)
round(res, 2)

#proste modele
m1=lm(chance~harmonic,data=data) #AIC-392.37
m2=lm(chance~k6,data=data) #AIC -429.13

par(mfrow=c(2,2))
plot(m1)
#png(filename="diagnostic_harmonic.png",res=1000)
#dev.off()

Y_prim=predict(m1,data['harmonic'])
X=sapply(data['harmonic'],as.numeric)
plot(X,Y,col=443,pch = 19, main = "Regression model",
     xlab = "Harmonic centrality", ylab = "Chance",)
lines(X,Y_prim,col='red',lwd=2)
#png(filename="regression_harmonic.png",res=1000)

par(mfrow=c(2,2))
plot(m2)
#png(filename="diagnostic_harmonic.png",res=1000)
#dev.off()

Y_prim=predict(m2,data['k6'])
X=sapply(data['k6'],as.numeric)
plot(X,Y,col=443,pch = 19, main = "Regression model",
     xlab = "k6", ylab = "Chance",)
lines(X,Y_prim,col='red',lwd=2)

####################### Model z transformacj¹ dla k6

#pierwiastek <- zdecydowanie gorzej
Y_transform=sqrt(Y)
m3=lm(Y_transform~X)
par(mfrow=c(2,2))
plot(m3) 

#pierwiastek na oba -> ca³kiem nieŸle na pewno duuu¿o lepiej 
X_transform=sqrt(X)
m4=lm(Y_transform~X_transform)
par(mfrow=c(2,2))
plot(m4)

residuals=m4$residuals
shapiro.test(residuals)
acf(residuals)

Y_tr_prim=predict(m4,sqrt(data['k6']))
plot(X_transform,Y_transform,col=443,pch = 19, main = "Regression model",
     xlab = "sqrt(k6)", ylab = "sqrt(Chance)")
lines(X_transform,Y_tr_prim,col='red',lwd=2)

################## Modele wielu zmiennych #################################

#ten sposób eliminacji zapewnia brak korelacji i wszytskie wspolczynniki sa dodatnie
#co jest intuicyjnie poprawne

################### Te co maja w sobie kontakty ############################
model_con_eigen=lm(chance~k3+k6+k9+k_end+eigen+cluster+close+between,data=data)
#optymalny
step(model_con_eigen)
m_eigen=lm(formula = chance ~ k3 + k6 + k9 + eigen + cluster + between, 
    data = data) # AIC=-495.56 , R^2=0.88, wszystkie prawie znaczace (oprocz 2)

model_con_d=lm(chance~k3+k6+k9+k_end+d_centrality+cluster+close+between,data=data)
#optymalny
step(model_con_d)
m_d=lm(chance ~ k3 + k6 + k9 + d_centrality + cluster + 
    between, data = data) #AIC=-499.34, R^2=0.8888, znaczace (oprocz 1)

model_con_walk=lm(chance~k3+k6+k9+k_end+walk+cluster+close+between,data=data)
#optymalny
step(model_con_walk)
m_walk=lm(formula = chance ~ k3 + k6 + k9 + walk + cluster + between, 
    data = data) # AIC=-500.75, R^2=0.8905, jeden nieznaczacy

model_con_inf=lm(chance~k3+k6+k9+k_end+inf+cluster+close+between,data=data)
step(model_con_inf)
m_inf=lm(chance ~ k3 + k6 + k9 + inf + cluster + between,data=data) #AIC=-497.75, R^2= 0.8868, znaczace (1 prawie nie)
 
##################### Te co maja w sobie harmonic zamiast kontaktów #############
# jak harmonic to nei moge kontaktów ani closeness

m_h_eigen=lm(chance~harmonic+eigen+cluster+between,data=data)
step(m_h_eigen)
m_h_opt=lm(chance ~ harmonic + eigen + cluster,data=data) #AIC=-399.32, R^2=0.66, znaczace

m_h_d=lm(chance~harmonic+d_centrality+cluster+between,data=data)
step(m_h_d)
m_h_d_opt=lm(formula = chance ~ harmonic + d_centrality + cluster, data = data) #AIC= -402.83, R^2=0.67

m_h_walk=lm(chance~harmonic+walk+cluster+between,data=data)
step(m_h_walk)
m_h_walk_opt=lm(chance ~ harmonic + walk + cluster,data=data) #AIC=-402.84, R^2= 0.6726, znaczace

m_h_inf=lm(chance~harmonic+inf+cluster+between,data=data)
step(m_h_inf) 
m_h_inf_opt=lm(formula = chance ~ harmonic + inf + cluster, data = data) #AIC=-401.54, R^2=0.668, znaczace 

########## WNIOSEK :  TE Z HARMONIC ZNACZACO GORSZE AIC I R^2 WIEC WYBIERAM TE Z KONTAKTAMI

######### BIORÊ TEN MODEL Z KONTAKTÓW KTÓRY MA NAJWIÊKSZE AIC I R^2 TO JEST TEN Z RANDOM

summary(m_walk) #niestety jeden nie jest super znaczacy przy betweeness, ale nie ma problemu korelacji
 # dobry F-test p-value na pewniej lepiej opisuje ni¿ zwyk³a œrednia z tych wartoœci

par(mfrow=c(2,2))

plot(m_walk) # NIE CHCE SPELNIAC ZA BARDZO ZA£O¯EÑ MODELU

########### NO TO MOZE JAKAS TRANSFORMACJA? PROBUJE TO SAMO CO WCZESNIEJ Z TYM PIERWIASTKIEM

m_walk=lm(formula = chance ~ k3 + k6 + k9 + walk + cluster + between, 
    data = data) # AIC=-500.75, R^2=0.8905, jeden nieznaczacy

m_walk=lm( sqrt(chance) ~ k3 + k6 + k9 + walk + cluster + between, 
    data = data)
par(mfrow=c(2,2))
plot(m_walk) #GORZEJ

#no to transofrmacja na wszytsko
m_walk=lm( sqrt(chance) ~ sqrt(k3) + sqrt(k6) + sqrt(k9) + sqrt(walk)
		 + sqrt(cluster) + sqrt(between), data = data)
step(m_walk)

m_walk2=lm( sqrt(chance) ~ sqrt(k3) + sqrt(k6) + sqrt(k9)+ sqrt(walk)
		 + sqrt(cluster) + sqrt(between), data = data)
step(m_walk2)



#no lepiej spe³nia ale sza³u nie ma, trochê ta normalnoœæ taka krzywa

m_walk_no_between=lm(sqrt(chance) ~ sqrt(k3) + sqrt(k6) + sqrt(k9) + sqrt(walk) + 
    sqrt(cluster),data=data)

par(mfrow=c(2,2))

residuals=m_walk_no_between$residuals
shapiro.test(residuals)
acf(residuals)

 

